# -*- coding: utf-8 -*-
"""Copy of hacksphpire.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KXloDLyrD1tIuB1tbacWcg2qpuyDavRC
"""

import pandas as pd

# Load Data
master_stock = pd.read_csv('/content/master_stock.csv')
daily_sales = pd.concat([pd.read_csv(f'/content/daily_sales_2025-04-{day}.csv') for day in range(22, 27)])

# Data Cleaning
# Convert date columns to datetime
daily_sales['Date'] = pd.to_datetime(daily_sales['Date'], format='%Y-%m-%d')

# Check for missing values
print(master_stock.isnull().sum())
print(daily_sales.isnull().sum())

# Merge Datasets
merged_data = pd.merge(master_stock, daily_sales, on='Medicine_Name', how='left')

# Calculate total units sold for each medicine
sales_trend = daily_sales.groupby('Medicine_Name')['Units_Sold'].sum().reset_index()

# Merge sales trend with master stock
merged_data = pd.merge(merged_data, sales_trend, on='Medicine_Name', how='left', suffixes=('', '_Total_Sold'))

# Calculate remaining stock
merged_data['Remaining_Stock'] = merged_data['Remaining_Stock'] - merged_data['Units_Sold'].fillna(0)

# Define reorder point based on average sales and lead time
merged_data['Average_Sales'] = merged_data['Units_Sold'].fillna(0) / len(daily_sales['Date'].unique())
merged_data['Reorder_Point'] = merged_data['Average_Sales'] * merged_data['Lead_Time_Day']

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

# Prepare features and target variable
X = merged_data[['Remaining_Stock', 'Average_Sales', 'Lead_Time_Day']]
y = merged_data['Units_Sold'].fillna(0)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict on test set
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

# Forecast future sales
merged_data['Predicted_Sales'] = model.predict(X)

# Identify stock to order
merged_data['Stock_To_Order'] = merged_data['Reorder_Point'] - merged_data['Remaining_Stock']
merged_data['Stock_To_Order'] = merged_data['Stock_To_Order'].apply(lambda x: x if x > 0 else 0)

# Identify stock to clear
merged_data['Clear_Stock'] = merged_data['Remaining_Stock'] - merged_data['Average_Sales'] * 2  # Example threshold
merged_data['Clear_Stock'] = merged_data['Clear_Stock'].apply(lambda x: x if x > 0 else 0)

# Generate Report
reorder_report = merged_data[['Medicine_Name', 'Stock_To_Order']].query('Stock_To_Order > 0')
clear_report = merged_data[['Medicine_Name', 'Clear_Stock']].query('Clear_Stock > 0')

# Save reports to CSV
reorder_report.to_csv('reorder_report.csv', index=False)
clear_report.to_csv('clear_report.csv', index=False)

# # Print reports
# print("Medicines to Reorder:")
# print(reorder_report)

# print("\nMedicines to Clear:")
# print(clear_report)

import matplotlib.pyplot as plt
import seaborn as sns

# Group by Medicine_Name and sum the quantities to avoid duplicates
reorder_report = reorder_report.groupby('Medicine_Name', as_index=False).sum()
clear_report = clear_report.groupby('Medicine_Name', as_index=False).sum()

# Save reports to CSV
reorder_report.to_csv('reorder_report.csv', index=False)
clear_report.to_csv('clear_report.csv', index=False)

# Print reports
print("Medicines to Reorder:")
sorted_reorder_report = reorder_report.sort_values(by='Stock_To_Order', ascending=False)
print(sorted_reorder_report.head(3))
# Print the first 5 rows of the sorted DataFrame
print(reorder_report.head(3))

print("\nMedicines to Clear:")
sorted_clear_report = clear_report.sort_values(by='Clear_Stock', ascending=False)

# Print the first 5 rows of the sorted DataFrame
print(sorted_clear_report.head(3))
# Visualization of Stock to Order
plt.figure(figsize=(12, 6))
sns.barplot(data=reorder_report, x='Medicine_Name', y='Stock_To_Order', palette='viridis')
plt.title('Medicines to Reorder')
plt.xlabel('Medicine Name')
plt.ylabel('Stock to Order Quantity')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('medicines_to_reorder.png')
plt.show()

# Visualization of Stock to Clear
plt.figure(figsize=(12, 6))
sns.barplot(data=clear_report, x='Medicine_Name', y='Clear_Stock', palette='rocket')
plt.title('Medicines to Clear')
plt.xlabel('Medicine Name')
plt.ylabel('Clear Stock Quantity')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('medicines_to_clear.png')
plt.show()

# Visualization of Remaining Stock vs. Predicted Sales
plt.figure(figsize=(12, 6))
sns.barplot(data=merged_data, x='Medicine_Name', y='Remaining_Stock', color='blue', label='Remaining Stock')
sns.barplot(data=merged_data, x='Medicine_Name', y='Predicted_Sales', color='orange', label='Predicted Sales')
plt.title('Remaining Stock vs. Predicted Sales')
plt.xlabel('Medicine Name')
plt.ylabel('Quantity')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.savefig('remaining_stock_vs_predicted_sales.png')
plt.show()

import numpy as np

# Calculate Actual Speed of Stock Decline (Average Daily Sales)
merged_data['Average_Daily_Sales'] = merged_data['Units_Sold'].fillna(0) / len(daily_sales['Date'].unique())
merged_data['Actual_Speed_Decline'] = merged_data['Average_Daily_Sales']

# Calculate Speed to Remove Stock based on Expiry Date
# Convert Expiry_Date to datetime
merged_data['Expiry_Date'] = pd.to_datetime(merged_data['Expiry_Date'], format='%d-%m-%Y')
# Calculate days until expiry
merged_data['Days_Until_Expiry'] = (merged_data['Expiry_Date'] - pd.to_datetime('today')).dt.days
# Calculate Speed to Remove Stock
merged_data['Speed_To_Remove_Stock'] = merged_data['Remaining_Stock'] / merged_data['Days_Until_Expiry'].replace(0, np.nan)

# Prepare data for plotting
plot_data = merged_data[['Medicine_Name', 'Actual_Speed_Decline', 'Speed_To_Remove_Stock']].dropna()

# # Plotting
# plt.figure(figsize=(14, 7))
# plt.plot(plot_data['Medicine_Name'], plot_data['Actual_Speed_Decline'], marker='o', label='Actual Speed of Stock Decline', color='blue')
# plt.plot(plot_data['Medicine_Name'], plot_data['Speed_To_Remove_Stock'], marker='o', label='Speed to Remove Stock', color='orange')

# plt.title('Actual Speed of Stock Decline vs Speed to Remove Stock')
# plt.xlabel('Medicine Name')
# plt.ylabel('Speed (Units per Day)')
# plt.xticks(rotation=45)
# plt.legend()
# plt.tight_layout()
# plt.grid()
# plt.savefig('actual_vs_remove_stock_speed.png')
# plt.show()
#1


#2
fig, ax1 = plt.subplots(figsize=(14, 7))

ax1.bar(plot_data['Medicine_Name'], plot_data['Actual_Speed_Decline'], color='blue', alpha=0.6, label='Actual Speed of Stock Decline')
ax1.set_ylabel('Actual Speed of Stock Decline (Units per Day)', color='blue')
ax1.tick_params(axis='y', labelcolor='blue')

ax2 = ax1.twinx()
ax2.plot(plot_data['Medicine_Name'], plot_data['Speed_To_Remove_Stock'], color='orange', marker='o', label='Speed to Remove Stock')
ax2.set_ylabel('Speed to Remove Stock (Units per Day)', color='orange')
ax2.tick_params(axis='y', labelcolor='orange')

plt.title('Actual Speed of Stock Decline vs Speed to Remove Stock')
plt.xticks(rotation=45)
fig.tight_layout()
plt.show()
#3

